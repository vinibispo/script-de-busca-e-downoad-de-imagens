import { ISpacingProperties } from "../../../file/paragraph";
import { XmlComponent } from "../../../file/xml-components";
export interface IStyleAttributes {
    readonly type?: string;
    readonly styleId?: string;
    readonly default?: boolean;
    readonly customStyle?: string;
}
export declare class Style extends XmlComponent {
    constructor(attributes: IStyleAttributes, name?: string);
    push(styleSegment: XmlComponent): void;
}
export declare class ParagraphStyle extends Style {
    private readonly paragraphProperties;
    private readonly runProperties;
    constructor(styleId: string, name?: string);
    addParagraphProperty(property: XmlComponent): ParagraphStyle;
    addRunProperty(property: XmlComponent): ParagraphStyle;
    basedOn(parentId: string): ParagraphStyle;
    quickFormat(): ParagraphStyle;
    next(nextId: string): ParagraphStyle;
    size(twips: number): ParagraphStyle;
    bold(): ParagraphStyle;
    italics(): ParagraphStyle;
    smallCaps(): ParagraphStyle;
    allCaps(): ParagraphStyle;
    strike(): ParagraphStyle;
    doubleStrike(): ParagraphStyle;
    subScript(): ParagraphStyle;
    superScript(): ParagraphStyle;
    underline(underlineType?: string, color?: string): ParagraphStyle;
    color(color: string): ParagraphStyle;
    font(fontName: string): ParagraphStyle;
    characterSpacing(value: number): ParagraphStyle;
    center(): ParagraphStyle;
    left(): ParagraphStyle;
    right(): ParagraphStyle;
    justified(): ParagraphStyle;
    thematicBreak(): ParagraphStyle;
    maxRightTabStop(): ParagraphStyle;
    leftTabStop(position: number): ParagraphStyle;
    indent(attrs: object): ParagraphStyle;
    spacing(params: ISpacingProperties): ParagraphStyle;
    keepNext(): ParagraphStyle;
    keepLines(): ParagraphStyle;
}
export declare class HeadingStyle extends ParagraphStyle {
    constructor(styleId: string, name: string);
}
export declare class TitleStyle extends HeadingStyle {
    constructor();
}
export declare class Heading1Style extends HeadingStyle {
    constructor();
}
export declare class Heading2Style extends HeadingStyle {
    constructor();
}
export declare class Heading3Style extends HeadingStyle {
    constructor();
}
export declare class Heading4Style extends HeadingStyle {
    constructor();
}
export declare class Heading5Style extends HeadingStyle {
    constructor();
}
export declare class Heading6Style extends HeadingStyle {
    constructor();
}
export declare class ListParagraph extends ParagraphStyle {
    constructor();
}
export declare class CharacterStyle extends Style {
    private readonly runProperties;
    constructor(styleId: string, name?: string);
    basedOn(parentId: string): CharacterStyle;
    addRunProperty(property: XmlComponent): CharacterStyle;
    color(color: string): CharacterStyle;
    underline(underlineType?: string, color?: string): CharacterStyle;
    size(twips: number): CharacterStyle;
}
export declare class HyperlinkStyle extends CharacterStyle {
    constructor();
}
export declare class FootnoteReferenceStyle extends Style {
    private readonly runProperties;
    constructor();
}
export declare class FootnoteText extends ParagraphStyle {
    constructor();
}
export declare class FootnoteTextChar extends CharacterStyle {
    constructor();
}
